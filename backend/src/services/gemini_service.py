import os
import google.generativeai as genai
from datetime import datetime
import json

class GeminiService:
    def __init__(self):
        self.model = None
        self.initialize_gemini()
    
    def initialize_gemini(self):
        """Inicializa o Gemini AI"""
        try:
            # Usar a API key do ambiente
            api_key = os.getenv('GEMINI_API_KEY')
            if not api_key:
                print("‚ùå GEMINI_API_KEY n√£o encontrada no ambiente")
                return False
            
            genai.configure(api_key=api_key)
            
            # Configurar o modelo
            generation_config = {
                "temperature": 0.7,
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 1000,
            }
            
            safety_settings = [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
            
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-flash",
                generation_config=generation_config,
                safety_settings=safety_settings
            )
            
            print("‚úÖ Gemini AI inicializado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar Gemini: {e}")
            return False
    
    def get_coach_response(self, user_message, user_context=None):
        """Gera resposta do Coach EVO usando Gemini AI"""
        if not self.model:
            return self.get_fallback_response()
        
        try:
            # Construir prompt contextualizado
            system_prompt = self.build_coach_prompt(user_context)
            full_prompt = f"{system_prompt}\n\nUsu√°rio: {user_message}\n\nCoach EVO:"
            
            # Gerar resposta
            response = self.model.generate_content(full_prompt)
            
            if response.text:
                return {
                    "message": response.text.strip(),
                    "source": "gemini_ai",
                    "timestamp": datetime.now().strftime("%H:%M")
                }
            else:
                return self.get_fallback_response()
                
        except Exception as e:
            print(f"Erro no Gemini: {e}")
            return self.get_fallback_response()
    
    def build_coach_prompt(self, user_context=None):
        """Constr√≥i o prompt contextualizado para o Coach EVO"""
        base_prompt = """
Voc√™ √© o Coach EVO, um assistente virtual especializado em fitness e nutri√ß√£o do aplicativo EvolveYou. 

PERSONALIDADE:
- Motivador, emp√°tico e encorajador
- Usa linguagem brasileira informal mas respeitosa
- Foca em resultados pr√°ticos e sustent√°veis
- Sempre positivo e construtivo

ESPECIALIDADES:
- Nutri√ß√£o personalizada com base TACO brasileira
- Treinos adaptativos e progressivos
- C√°lculos metab√≥licos precisos
- Motiva√ß√£o e acompanhamento psicol√≥gico

DIRETRIZES:
- Respostas curtas e objetivas (m√°ximo 2-3 frases)
- Use emojis moderadamente para engajamento
- Sempre baseie sugest√µes nos dados do usu√°rio
- Incentive h√°bitos saud√°veis sustent√°veis
- Nunca d√™ conselhos m√©dicos espec√≠ficos
"""
        
        if user_context:
            context_info = f"""
CONTEXTO DO USU√ÅRIO:
- Nome: {user_context.get('name', 'Usu√°rio')}
- Idade: {user_context.get('age', 'N/A')} anos
- Peso atual: {user_context.get('current_weight', 'N/A')} kg
- Meta: {user_context.get('goal', 'N/A')}
- N√≠vel de atividade: {user_context.get('activity_level', 'N/A')}
- TMB: {user_context.get('bmr', 'N/A')} kcal/dia
- Meta cal√≥rica: {user_context.get('target_calories', 'N/A')} kcal/dia

DADOS DE HOJE:
- Calorias consumidas: {user_context.get('current_calories', 'N/A')} kcal
- Passos: {user_context.get('steps', 'N/A')}
- Dist√¢ncia: {user_context.get('distance', 'N/A')} km
- Exerc√≠cio: {user_context.get('exercise_minutes', 'N/A')} min
"""
            return base_prompt + context_info
        
        return base_prompt
    
    def get_nutrition_analysis(self, food_description, user_context=None):
        """Analisa alimentos usando Gemini AI"""
        if not self.model:
            return {"error": "Gemini n√£o dispon√≠vel"}
        
        try:
            prompt = f"""
Como Coach EVO especialista em nutri√ß√£o brasileira, analise este alimento:

ALIMENTO: {food_description}

Forne√ßa uma an√°lise nutricional estimada no formato JSON:
{{
    "nome": "nome do alimento",
    "calorias_por_100g": n√∫mero,
    "proteinas": n√∫mero,
    "carboidratos": n√∫mero,
    "gorduras": n√∫mero,
    "fibras": n√∫mero,
    "categoria": "categoria do alimento",
    "recomendacao": "breve recomenda√ß√£o personalizada"
}}

Base suas estimativas na tabela TACO brasileira quando poss√≠vel.
"""
            
            response = self.model.generate_content(prompt)
            
            if response.text:
                # Tentar extrair JSON da resposta
                try:
                    # Limpar a resposta para extrair apenas o JSON
                    json_start = response.text.find('{')
                    json_end = response.text.rfind('}') + 1
                    
                    if json_start != -1 and json_end != -1:
                        json_str = response.text[json_start:json_end]
                        return json.loads(json_str)
                    else:
                        return {"error": "Formato de resposta inv√°lido"}
                        
                except json.JSONDecodeError:
                    return {"error": "Erro ao processar an√°lise nutricional"}
            
            return {"error": "Nenhuma resposta gerada"}
            
        except Exception as e:
            print(f"Erro na an√°lise nutricional: {e}")
            return {"error": str(e)}
    
    def get_workout_suggestion(self, user_context=None, workout_type="geral"):
        """Sugere treinos personalizados usando Gemini AI"""
        if not self.model:
            return self.get_fallback_workout()
        
        try:
            prompt = f"""
Como Coach EVO especialista em treinos, crie uma sugest√£o de treino personalizada:

TIPO DE TREINO: {workout_type}
CONTEXTO DO USU√ÅRIO: {user_context or "Usu√°rio iniciante"}

Forne√ßa uma sugest√£o no formato:
- Aquecimento (5 min)
- 3-4 exerc√≠cios principais
- Resfriamento (5 min)
- Dicas de execu√ß√£o

Mantenha a resposta concisa e motivadora.
"""
            
            response = self.model.generate_content(prompt)
            
            if response.text:
                return {
                    "suggestion": response.text.strip(),
                    "source": "gemini_ai",
                    "workout_type": workout_type
                }
            else:
                return self.get_fallback_workout()
                
        except Exception as e:
            print(f"Erro na sugest√£o de treino: {e}")
            return self.get_fallback_workout()
    
    def get_motivational_message(self, user_progress=None):
        """Gera mensagem motivacional personalizada"""
        if not self.model:
            return "Voc√™ est√° indo muito bem! Continue assim! üí™"
        
        try:
            prompt = f"""
Como Coach EVO, crie uma mensagem motivacional curta e personalizada baseada no progresso:

PROGRESSO: {user_progress or "Usu√°rio ativo"}

Crit√©rios:
- M√°ximo 2 frases
- Tom encorajador e brasileiro
- Use 1 emoji relevante
- Foque nos pontos positivos
"""
            
            response = self.model.generate_content(prompt)
            
            if response.text:
                return response.text.strip()
            else:
                return "Voc√™ est√° fazendo um √≥timo trabalho! Continue focado nos seus objetivos! üéØ"
                
        except Exception as e:
            print(f"Erro na mensagem motivacional: {e}")
            return "Cada dia √© uma nova oportunidade de evoluir! Vamos juntos! üöÄ"
    
    def get_fallback_response(self):
        """Resposta de fallback quando Gemini n√£o est√° dispon√≠vel"""
        fallback_responses = [
            "√ìtima pergunta! Baseado no seu perfil, recomendo manter o foco na consist√™ncia dos treinos. üí™",
            "Vi que voc√™ est√° progredindo bem! Que tal aumentarmos a intensidade gradualmente? üî•",
            "Lembre-se de manter a hidrata√ß√£o em dia. Seu corpo precisa de √°gua para funcionar bem! üíß",
            "Seu progresso est√° excelente! Continue assim e voc√™ alcan√ßar√° sua meta em breve. üéØ",
            "Posso sugerir algumas alternativas saud√°veis para suas refei√ß√µes. Vamos otimizar sua nutri√ß√£o! ü•ó"
        ]
        
        import random
        return {
            "message": random.choice(fallback_responses),
            "source": "fallback",
            "timestamp": datetime.now().strftime("%H:%M")
        }
    
    def get_fallback_workout(self):
        """Sugest√£o de treino de fallback"""
        return {
            "suggestion": """
üî• TREINO DO DIA - CORPO INTEIRO

Aquecimento (5 min):
- Polichinelos: 30 seg
- Rota√ß√£o de bra√ßos: 30 seg

Exerc√≠cios principais:
1. Agachamento: 3x12
2. Flex√£o (joelhos se necess√°rio): 3x8
3. Prancha: 3x30 seg
4. Burpee modificado: 3x5

Resfriamento (5 min):
- Alongamento geral

üí° Dica: Foque na execu√ß√£o correta antes da velocidade!
            """,
            "source": "fallback",
            "workout_type": "geral"
        }

# Inst√¢ncia global do servi√ßo
gemini_service = GeminiService()

